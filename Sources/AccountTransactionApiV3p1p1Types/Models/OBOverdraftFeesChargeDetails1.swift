//
// OBOverdraftFeesChargeDetails1.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details about the fees/charges */

public struct OBOverdraftFeesChargeDetails1: Codable {

    public var feeType: OBOverdraftFeeType1Code
    /** Indicates whether fee and charges are negotiable */
    public var negotiableIndicator: Bool?
    /** Indicates if the fee/charge is already covered by an &#39;Overdraft Control&#39; fee or not. */
    public var overdraftControlIndicator: Bool?
    /** Every additional tranche of an overdraft balance to which an overdraft fee is applied */
    public var incrementalBorrowingAmount: Double?
    /** Every additional tranche of an overdraft balance to which an overdraft fee is applied */
    public var feeAmount: Double?
    /** Every additional tranche of an overdraft balance to which an overdraft fee is applied */
    public var feeRate: Double?
    public var feeRateType: OBInterestRateType1Code?
    public var applicationFrequency: OBFeeFrequency1Code
    public var calculationFrequency: OBFeeFrequency1Code?
    /** Free text for capturing any other info related to Overdraft Fees Charge Details */
    public var notes: [String]?
    /** Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate. */
    public var overdraftFeeChargeCap: [OBOverdraftFeeChargeCap1]?
    public var otherFeeType: OBOtherCodeType1?
    public var otherFeeRateType: OBOtherCodeType1?
    public var otherApplicationFrequency: OBOtherCodeType1?
    public var otherCalculationFrequency: OBOtherCodeType1?

    public init(feeType: OBOverdraftFeeType1Code, negotiableIndicator: Bool?, overdraftControlIndicator: Bool?, incrementalBorrowingAmount: Double?, feeAmount: Double?, feeRate: Double?, feeRateType: OBInterestRateType1Code?, applicationFrequency: OBFeeFrequency1Code, calculationFrequency: OBFeeFrequency1Code?, notes: [String]?, overdraftFeeChargeCap: [OBOverdraftFeeChargeCap1]?, otherFeeType: OBOtherCodeType1?, otherFeeRateType: OBOtherCodeType1?, otherApplicationFrequency: OBOtherCodeType1?, otherCalculationFrequency: OBOtherCodeType1?) {
        self.feeType = feeType
        self.negotiableIndicator = negotiableIndicator
        self.overdraftControlIndicator = overdraftControlIndicator
        self.incrementalBorrowingAmount = incrementalBorrowingAmount
        self.feeAmount = feeAmount
        self.feeRate = feeRate
        self.feeRateType = feeRateType
        self.applicationFrequency = applicationFrequency
        self.calculationFrequency = calculationFrequency
        self.notes = notes
        self.overdraftFeeChargeCap = overdraftFeeChargeCap
        self.otherFeeType = otherFeeType
        self.otherFeeRateType = otherFeeRateType
        self.otherApplicationFrequency = otherApplicationFrequency
        self.otherCalculationFrequency = otherCalculationFrequency
    }

    public enum CodingKeys: String, CodingKey { 
        case feeType = "FeeType"
        case negotiableIndicator = "NegotiableIndicator"
        case overdraftControlIndicator = "OverdraftControlIndicator"
        case incrementalBorrowingAmount = "IncrementalBorrowingAmount"
        case feeAmount = "FeeAmount"
        case feeRate = "FeeRate"
        case feeRateType = "FeeRateType"
        case applicationFrequency = "ApplicationFrequency"
        case calculationFrequency = "CalculationFrequency"
        case notes = "Notes"
        case overdraftFeeChargeCap = "OverdraftFeeChargeCap"
        case otherFeeType = "OtherFeeType"
        case otherFeeRateType = "OtherFeeRateType"
        case otherApplicationFrequency = "OtherApplicationFrequency"
        case otherCalculationFrequency = "OtherCalculationFrequency"
    }


}

